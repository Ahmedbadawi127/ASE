@page "/draft-shipments/create"
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@using Shipping.Domain.Enums;
@using Shipping.Shared.Commands.Shipments

@if (FModel != null)
{

    <h3>تسجيل شحنه</h3>

    <EditForm Model="@FModel" OnValidSubmit="SubmitClick">
        <FluentValidator Validator="custVal" />
        <ValidationSummary />

        <div class="row">
            <div class="form-group col-md-6">
                <label for="Customer">الراسل</label>
                <SfDropDownList id="Customer" @ref="refCustomer" Enabled="@(CustomerQuery != null)" AllowFiltering="true" TValue="int" TItem="CustomersDto" @bind-Value="FModel.CustomerId"
                                Placeholder="اختر الراسل" Query="@CustomerQuery">
                    <DropDownListEvents TValue="int" TItem="CustomersDto" Filtering="CustomerFiltering" ValueChange="CustomerChange"></DropDownListEvents>
                    <SfDataManager Url="api/Customers/GetCustomers" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <DropDownListFieldSettings Text="NameAr" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="() => FModel.CustomerId"></ValidationMessage>

            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <label for="ReceiverName">أسم المرسل اليه</label>
                <InputText id="ReceiverName" class="form-control" @bind-Value="FModel.ReceiverName"></InputText>
            </div>
            <div class="form-group col-md-6">
                <label for="ReceiverPhone">تليفون المرسل اليه</label>
                <InputText id="ReceiverPhone" class="form-control" @bind-Value="FModel.ReceiverPhone"></InputText>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <label for="State">المحافظه</label>
                <SfDropDownList id="State" @ref="refState" Enabled="@(StateQuery != null)" AllowFiltering="true" TValue="int" TItem="LookupDto" @bind-Value="FModel.ReceiverStateId"
                                Placeholder="اختر المحافظه" Query="@StateQuery">
                    <DropDownListEvents TValue="int" TItem="LookupDto" Filtering="StateFiltering" ValueChange="StateChange"></DropDownListEvents>
                    <SfDataManager Url="api/Lookups/GetLookups/AllStates" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <DropDownListFieldSettings Text="DisplayName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="() => FModel.ReceiverStateId"></ValidationMessage>
            </div>
            <div class="form-group col-md-6">
                <label for="City">المدينه</label>
                <SfDropDownList id="City" @ref="refCity" Enabled="@(CityQuery != null)" AllowFiltering="true" TValue="int" TItem="LookupWithCategDto" @bind-Value="FModel.ReceiverCityId"
                                Placeholder="اختر المدينه" Query="@CityQuery">
                    <DropDownListEvents TValue="int" TItem="LookupWithCategDto" Filtering="CityFiltering" ValueChange="CityChange"></DropDownListEvents>
                    <SfDataManager Url="api/Lookups/GetLookupsWithCateg/AllCities" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <DropDownListFieldSettings Text="DisplayName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="() => FModel.ReceiverCityId"></ValidationMessage>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-12">
                <label for="Address">العنوان</label>
                <InputText id="Address" class="form-control" @bind-Value="FModel.Address"></InputText>
            </div>
        </div>

        <div class="row">
            <div class="form-group col-md-6">
                <label for="Notes">ملاحظات</label>
                <InputText id="Notes" class="form-control" @bind-Value="FModel.Notes"></InputText>
            </div>
            <div class="form-group col-md-6">
                <label for="Address">مبلغ التحصيل</label>
                <InputNumber id="CashToBeCollected" class="form-control" @bind-Value="FModel.CashToBeCollected"></InputNumber>
            </div>
        </div>

        <div class="form-group">
            <button type="submit" disabled=@Disabled class="btn btn-primary">حفظ</button>
            <button class="btn btn-link" @onclick="Cancel_Click">إلغاء</button>
        </div>
    </EditForm>

    <div>
        <div id="container">
            <SfSpinner @bind-Visible="@Disabled" Label="تحميل ...">
            </SfSpinner>
        </div>
    </div>

}
@code {

    [Inject]
    protected HttpClient Http { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }
    [Parameter]
    public EventCallback<string> OnSuccess { get; set; }
    bool Disabled { get; set; }
    [Parameter]
    public int Id { get; set; }

    public CreateDraftShipmentFM FModel { get; set; }
    CreateDraftShipmentCommandValidator custVal = new CreateDraftShipmentCommandValidator();


    public SfDropDownList<int, CustomersDto> refCustomer { get; set; }
    public Query CustomerQuery { get; set; } = null;
    public SfDropDownList<int, LookupDto> refState { get; set; }
    public Query StateQuery { get; set; } = null;
    public SfDropDownList<int, LookupWithCategDto> refCity { get; set; }
    public Query CityQuery { get; set; } = null;



    public async void StateChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupDto> args)
    {
        var Val = args.ItemData.Id;
        if (Val != 0)
        {
            var lData = args.ItemData;
            FModel.ReceiverStateName = lData.DisplayName;
            FModel.ReceiverCityName = null;
            this.CityQuery = new Query().AddParams("Take", 6).AddParams("CategoryId", Val);
        }
        else
        {
            FModel.ReceiverStateName = null;
        }
        StateHasChanged();
    }

    private void StateFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        this.StateQuery = new Query().AddParams("Search", args.Text).AddParams("Take", 6);

        StateHasChanged();
    }

    public async void CityChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupWithCategDto> args)
    {
        var Val = args.ItemData.Id;
        if (Val != 0)
        {
            var lData = args.ItemData;
            FModel.ReceiverCityName = lData.DisplayName;
        }
        else
        {
            FModel.ReceiverCityName = null;
        }
        StateHasChanged();
    }

    private void CityFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        this.CityQuery = new Query().AddParams("Search", args.Text).AddParams("Take", 6);

        StateHasChanged();
    }


    public async void CustomerChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, CustomersDto> args)
    {
        var Val = args.ItemData.Id;
        if (Val != 0)
        {
            var lData = args.ItemData;
            FModel.CustomerName = lData.NameAr;
        }
        else
        {
            FModel.CustomerName = null;
        }
        StateHasChanged();
    }

    private void CustomerFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        this.CustomerQuery = new Query().AddParams("Search", args.Text).AddParams("Take", 6);

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Disabled = false;

        this.CustomerQuery = new Query().AddParams("Take", 6);
        this.StateQuery = new Query().AddParams("Take", 6);



        FModel = new CreateDraftShipmentFM
        {
            Status = ShipmentStatus.Draft,
        };

    }


    public async Task Cancel_Click()
    {
        await OnCancel.InvokeAsync(null);
    }

    protected async Task SubmitClick()
    {
        try
        {
            Disabled = true;
            var response = await Http.PostAsJsonAsync<CreateDraftShipmentCommand>("api/DraftShipments/CreateDraftShipment", FModel);
            if (!response.IsSuccessStatusCode)
            {
                Disabled = false;
                string error = await response.Content.ReadAsStringAsync();
                throw new Exception(error);
            }
            string fid = await response.Content.ReadAsStringAsync();
            if (OnSuccess.HasDelegate)
            {
                await OnSuccess.InvokeAsync(fid);
            }
            else
            {
                Disabled = false;
                Navigation.NavigateTo($"/draft-shipments");
            }
        }
        catch (Exception ex)
        {
            //await umAlQuraOperations.ShowToast("رساله خطأ من النظام", ex.Message, "error");
        }
    }
}


