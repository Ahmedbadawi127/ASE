@page "/draft-shipments"
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@using Shipping.Shared.ApiKeysTranslation
@using Shipping.Shared.Extensions
@inject HttpClient Http
@using Shipping.Domain.Enums;

<h3>عرض الشحنات الجديده</h3>

<div>

    <SfButton @onclick="Add" CssClass="e-info"> اضافة شحنه </SfButton>

    <SfGrid ID="Grid" AllowReordering="true" @ref="Grid" AllowFiltering="true" AllowExcelExport="true" AllowGrouping="true" AllowPdfExport="true"
            AllowRowDragAndDrop="true" AllowSorting="true" AllowTextWrap="true" Width="100%" AllowPaging="true" TValue="DraftShipmentsDto" EnableRtl="true"
            Toolbar="@(new List<string>() { "ExcelExport", "PdfExport" })">

        <GridPageSettings PageSize="20"></GridPageSettings>
        <GridEvents OnToolbarClick="ToolbarClick" TValue="DraftShipmentsDto"></GridEvents>

        <SfDataManager Url="@($"api/DraftShipments/GetDraftShipmentsPage/")" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
        <GridColumns>
            <GridColumn Field=@(nameof(DraftShipmentsDto.Id)) HeaderText="الأي دي"></GridColumn>
            <GridColumn Field=@(nameof(DraftShipmentsDto.CustomerName)) HeaderText="الراسل"></GridColumn>
            <GridColumn Field=@(nameof(DraftShipmentsDto.ReceiverName)) HeaderText="المرسل اليه"></GridColumn>
            <GridColumn Field=@(nameof(DraftShipmentsDto.ReceiverStateName)) HeaderText="محافظة المرسل اليه"></GridColumn>
            <GridColumn Field=@(nameof(DraftShipmentsDto.ReceiverCityName)) HeaderText="مدينة المرسل اليه"></GridColumn>
            <GridColumn Field=@(nameof(DraftShipmentsDto.Address)) HeaderText="عنوان المرسل اليه"></GridColumn>
            <GridColumn Field=@(nameof(DraftShipmentsDto.ReceiverPhone)) HeaderText="موبايل المرسل اليه"></GridColumn>
            <GridColumn Field=@(nameof(DraftShipmentsDto.CashToBeCollected)) HeaderText="مبلغ التحصيل"></GridColumn>
            <GridColumn Field=@(nameof(DraftShipmentsDto.Notes)) HeaderText="ملاحظات"></GridColumn>
            <GridColumn Field=@(nameof(DraftShipmentsDto.Status)) HeaderText="الحاله">
                <Template Context="cContext">
                    <span>
                        @((cContext as DraftShipmentsDto).Status.ToString().Translator(Keys.ShipmentStatus, ApiKeysTranslator.getTranslatedKeys))
                    </span>
                </Template>
            </GridColumn>

            <GridColumn HeaderText="خيارات" TextAlign="TextAlign.Center" Width="170">
                <Template>

                    <div class="d-flex justify-content-center">
                        <div class="col-6">
                            <button class="btn-icon-btn btn-outline-light" disabled=@Disabled @onclick="@(() => Edit((context as DraftShipmentsDto).Id))">
                                <img class="btn-icon" src="/img/editingColored.svg" />
                            </button>
                        </div>

                        <div class="col-6">
                            <button class="btn-icon-btn btn-outline-light" disabled="@((context as DraftShipmentsDto).Status != ShipmentStatus.Draft && Disabled)" @onclick="@(() => Delete((context as DraftShipmentsDto).Id))">
                                <img class="btn-icon" src="/img/trash.png" />
                            </button>
                        </div>

                    </div>

                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

@if (DeletedRecordId > 0)
{
    <DeleteConfirmationComponent DeletedRecordId="@DeletedRecordId" OnSuccess="OnSuccessDeleting" OnCancel="OnCancelDeleting"></DeleteConfirmationComponent>
}


@code {


    SfGrid<DraftShipmentsDto> Grid;
    bool Disabled { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Disabled = false;
    }


    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            this.Grid.ExcelExport();
        }
        if (args.Item.Id == "Grid_pdfexport")
        {
            this.Grid.PdfExport();
        }
    }

    private void Edit(int Id)
    {
        Navigation.NavigateTo($"/draft-shipments/update/{Id}");
    }

    public async Task Add()
    {
        Navigation.NavigateTo("/draft-shipments/create");
    }

    #region DeleteDialog

    public int DeletedRecordId { get; set; }

    private void Delete(int Id)
    {
        DeletedRecordId = Id;
    }

    private async Task DeleteConfirmed()
    {
        try
        {
            if (DeletedRecordId > 0)
            {
                Disabled = true;
                ShippingOperations.ShowSpinner(Disabled);
                var response = await Http.PostAsJsonAsync<int>("api/DraftShipments/DeleteDraftShipment", DeletedRecordId);
                if (!response.IsSuccessStatusCode)
                {
                    Disabled = false;
                    ShippingOperations.ShowSpinner(Disabled);
                    string error = await response.Content.ReadAsStringAsync();
                    throw new Exception(error);
                }
                else
                {
                    Disabled = false;
                    ShippingOperations.ShowSpinner(Disabled);
                    await ShippingOperations.ShowToast("نجاح", "تمت العملية بنجاح", ToastType.Success);
                }
            }

        }
        catch (Exception ex)
        {
            Disabled = false;
            ShippingOperations.ShowSpinner(Disabled);
            await ShippingOperations.ShowToast("خطأ من النظام", ex.Message, ToastType.Error);
        }

        Grid.Refresh();
    }



    public async Task OnCancelDeleting()
    {
        DeletedRecordId = 0;
    }

    public async Task OnSuccessDeleting()
    {
        await DeleteConfirmed();
        DeletedRecordId = 0;
    }

    #endregion

}
