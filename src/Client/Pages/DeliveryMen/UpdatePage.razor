@page "/deliverymen/update/{Id:int}"
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@using Shipping.Shared.Commands.DeliveryMen

@if (FModel != null)
{
    <h3>تعديل مندوب</h3>


    <EditForm Model="@FModel" OnValidSubmit="SubmitClick">
        <FluentValidator></FluentValidator>


        <div class="row">
            <div>
                <label for="checked" style="padding: 10px 10px 10px 0">مفعل</label>
                <SfSwitch @bind-Checked="FModel.Active"></SfSwitch>
            </div>
        </div>


        <div class="row">
            <div class="form-group col-md-6">
                <label for="NameAr">الاسم بالعربي</label>
                <InputText id="NameAr" class="form-control" @bind-Value="FModel.NameAr"></InputText>
                <ValidationMessage For="() => FModel.NameAr"></ValidationMessage>
            </div>
            <div class="form-group col-md-6">
                <label for="NameEn">الاسم بالانجليزي</label>
                <InputText id="NameEn" class="form-control" @bind-Value="FModel.NameEn"></InputText>
                <ValidationMessage For="() => FModel.NameEn"></ValidationMessage>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <label asp-for="Ingredients" class="control-label">النوع</label>

                <SfDropDownList id="Gender" @ref="refGender" Enabled="@(GenderQuery != null)" AllowFiltering="true" TValue="int" TItem="LookupDto" @bind-Value="FModel.GenderId"
                                Placeholder="اختر النوع" Query="@StateQuery">
                    <DropDownListEvents TValue="int" TItem="LookupDto" ValueChange="GenderChange"></DropDownListEvents>
                    <SfDataManager Url="api/Lookups/GetLookups/Genders" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <DropDownListFieldSettings Text="DisplayName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="() => FModel.GenderId"></ValidationMessage>
            </div>
            <div class="form-group col-md-6">
                <label for="Age">السن</label>
                <InputNumber id="Age" class="form-control" @bind-Value="FModel.Age"></InputNumber>
                <ValidationMessage For="() => FModel.Age"></ValidationMessage>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <SfTextBox Multiline=true FloatLabelType="@FloatLabelType.Auto" Placeholder="ادخل العنوان" @bind-Value="FModel.Address"></SfTextBox>
                <ValidationMessage For="() => FModel.Address"></ValidationMessage>
            </div>
            <div class="form-group col-md-6">
                <label for="Phone">التليفون</label>
                <InputText id="Phone" class="form-control" @bind-Value="FModel.Phone"></InputText>
                <ValidationMessage For="() => FModel.Phone"></ValidationMessage>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <label asp-for="Ingredients" class="control-label">المحافظه</label>
                <SfDropDownList id="State" @ref="refState" Enabled="@(StateQuery != null)" AllowFiltering="true" TValue="int" TItem="LookupDto" @bind-Value="FModel.StateId"
                                Placeholder="اختر المحافظه" Query="@StateQuery">
                    <DropDownListEvents TValue="int" TItem="LookupDto" Filtering="StateFiltering" ValueChange="StateChange"></DropDownListEvents>
                    <SfDataManager Url="api/Lookups/GetLookups/AllStates" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <DropDownListFieldSettings Text="DisplayName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="() => FModel.StateId"></ValidationMessage>
            </div>


            <div class="form-group col-md-6">
                <label asp-for="Ingredients" class="control-label">المدينه</label>
                <SfDropDownList id="City" @ref="refCity" Enabled="@(CityQuery != null)" AllowFiltering="true" TValue="int" TItem="LookupWithCategDto" @bind-Value="FModel.CityId"
                                Placeholder="اختر المدينه" Query="@CityQuery">
                    <DropDownListEvents TValue="int" TItem="LookupWithCategDto" Filtering="CityFiltering" ValueChange="CityChange"></DropDownListEvents>
                    <SfDataManager Url="api/Lookups/GetLookupsWithCateg/AllCities" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <DropDownListFieldSettings Text="DisplayName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="() => FModel.CityId"></ValidationMessage>
            </div>
        </div>



        <div class="form-group">
            <button type="submit" disabled=@Disabled class="btn btn-primary">حفظ</button>
            <button class="btn btn-link" @onclick="Cancel_Click">إلغاء</button>
        </div>
    </EditForm>

}


<div>
    <div id="container">
        <SfSpinner @bind-Visible="@Disabled" Label="تحميل ...">
        </SfSpinner>
    </div>
</div>


@code{
    [Inject]
    protected HttpClient Http { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }
    [Parameter]
    public EventCallback<string> OnSuccess { get; set; }
    CreateDeliveryManFM FModel { get; set; }
    bool Disabled { get; set; }
    public SfDropDownList<int, LookupDto> refState { get; set; }
    public Query StateQuery { get; set; } = null;
    public SfDropDownList<int, LookupWithCategDto> refCity { get; set; }
    public Query CityQuery { get; set; } = null;
    public SfDropDownList<int, LookupDto> refGender { get; set; }
    public Query GenderQuery { get; set; } = null;
    public DeliveryManDto DeliveryManData { get; set; }

    [Parameter]
    public int Id { get; set; }

    CreateDeliveryManCommandValidator custVal = new CreateDeliveryManCommandValidator();


    public async void GenderChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupDto> args)
    {
        var Val = args.ItemData.Id;
        if (Val != 0)
        {
            var lData = args.ItemData;
            FModel.GenderName = lData.DisplayName;
        }
        else
        {
            FModel.GenderName = null;
        }
        StateHasChanged();
    }


    public async void StateChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupDto> args)
    {
        var Val = args.ItemData.Id;
        if (Val != 0)
        {
            var lData = args.ItemData;
            FModel.StateName = lData.DisplayName;
            FModel.CityName = null;
            this.CityQuery = new Query().AddParams("Take", 6).AddParams("CategoryId", Val);
        }
        else
        {
            FModel.StateName = null;
        }
        StateHasChanged();
    }

    private void StateFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        this.StateQuery = new Query().AddParams("Search", args.Text).AddParams("Take", 6);

        StateHasChanged();
    }

    public async void CityChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupWithCategDto> args)
    {
        var Val = args.ItemData.Id;
        if (Val != 0)
        {
            var lData = args.ItemData;
            FModel.CityName = lData.DisplayName;
        }
        else
        {
            FModel.CityName = null;
        }
        StateHasChanged();
    }

    private void CityFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        this.CityQuery = new Query().AddParams("Search", args.Text).AddParams("Take", 6);

        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        Disabled = false;

        this.StateQuery = new Query().AddParams("Take", 6);
        this.GenderQuery = new Query();

        if (Id > 0)
        {
            var DeliveryManData = await Http.GetFromJsonAsync<DeliveryManDto>($"api/DeliveryMen/GetDeliveryManById/{Id}");

            FModel = new CreateDeliveryManFM
            {
                Id = DeliveryManData.Id,
                Address = DeliveryManData.Address,
                Age = DeliveryManData.Age,
                CityId = DeliveryManData.CityId,
                CityName = DeliveryManData.CityName,
                GenderId = DeliveryManData.GenderId,
                GenderName = DeliveryManData.GenderName,
                NameAr = DeliveryManData.NameAr,
                NameEn = DeliveryManData.NameEn,
                Phone = DeliveryManData.Phone,
                StateId = DeliveryManData.StateId,
                StateName = DeliveryManData.StateName,
                SId = DeliveryManData.SId,
                Active = DeliveryManData.Active,
            };

        }

    }




    public async Task Cancel_Click()
    {
        Navigation.NavigateTo($"/deliverymen");
    }

    protected async Task SubmitClick()
    {
        try
        {
            Disabled = true;
            var response = await Http.PostAsJsonAsync<CreateDeliveryManCommand>("api/DeliveryMen/Update", FModel);
            if (!response.IsSuccessStatusCode)
            {
                Disabled = false;
                string error = await response.Content.ReadAsStringAsync();
                throw new Exception(error);
            }
            else
            {
                Disabled = false;

                Navigation.NavigateTo($"/deliverymen");

            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
            //await umAlQuraOperations.ShowToast("رساله خطأ من النظام", ex.Message, "error");
        }
    }
}










