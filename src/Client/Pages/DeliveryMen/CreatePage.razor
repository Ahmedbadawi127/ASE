@page "/deliverymen/create"
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@using Shipping.Shared.Commands.DeliveryMen

@if (FModel != null)
{
    <h3>إضافة مندوب</h3>


    <EditForm Model="@FModel" OnValidSubmit="SubmitClick">
        <FluentValidator Validator="custVal" />


        <div class="row">
            <div>
                <label for="checked" style="padding: 10px 10px 10px 0">مفعل</label>
                <SfSwitch @bind-Checked="FModel.Active"></SfSwitch>
            </div>
        </div>


        <div class="row">
            <div class="form-group col-md-6">
                <label for="NameAr">الاسم بالعربي</label>
                <InputText id="NameAr" class="form-control" @bind-Value="FModel.NameAr"></InputText>
                <ValidationMessage For="() => FModel.NameAr"></ValidationMessage>
            </div>
            <div class="form-group col-md-6">
                <label for="NameEn">الاسم بالانجليزي</label>
                <InputText id="NameEn" class="form-control" @bind-Value="FModel.NameEn"></InputText>
                <ValidationMessage For="() => FModel.NameEn"></ValidationMessage>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <label asp-for="Ingredients" class="control-label">النوع</label>

                <SfDropDownList id="Gender" @ref="refGender" Enabled="@(GenderQuery != null)" AllowFiltering="true" TValue="int" TItem="LookupDto" @bind-Value="FModel.GenderId"
                                Placeholder="اختر النوع" Query="@StateQuery">
                    <DropDownListEvents TValue="int" TItem="LookupDto" ValueChange="GenderChange"></DropDownListEvents>
                    <SfDataManager Url="api/Lookups/GetLookups/Genders" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <DropDownListFieldSettings Text="DisplayName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="() => FModel.GenderId"></ValidationMessage>
            </div>
            <div class="form-group col-md-6">
                <label for="Age">السن</label>
                <InputNumber id="Age" class="form-control" @bind-Value="FModel.Age"></InputNumber>
                <ValidationMessage For="() => FModel.Age"></ValidationMessage>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <SfTextBox Multiline=true FloatLabelType="@FloatLabelType.Auto" Placeholder="ادخل العنوان" @bind-Value="FModel.Address"></SfTextBox>
                <ValidationMessage For="() => FModel.Address"></ValidationMessage>
            </div>
            <div class="form-group col-md-6">
                <label for="Phone">التليفون</label>
                <InputText id="Phone" class="form-control" @bind-Value="FModel.Phone"></InputText>
                <ValidationMessage For="() => FModel.Phone"></ValidationMessage>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <label asp-for="Ingredients" class="control-label">المحافظه</label>
                <SfDropDownList id="State" @ref="refState" Enabled="@(StateQuery != null)" AllowFiltering="true" TValue="int" TItem="LookupDto" @bind-Value="FModel.StateId"
                                Placeholder="اختر المحافظه" Query="@StateQuery">
                    <DropDownListEvents TValue="int" TItem="LookupDto" Filtering="StateFiltering" ValueChange="StateChange"></DropDownListEvents>
                    <SfDataManager Url="api/States/GetStates" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <DropDownListFieldSettings Text="DisplayName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="() => FModel.StateId"></ValidationMessage>
            </div>


            <div class="form-group col-md-6">
                <label asp-for="Ingredients" class="control-label">المدينه</label>
                <SfDropDownList id="City" @ref="refCity" Enabled="@(CityQuery != null)" AllowFiltering="true" TValue="int" TItem="LookupWithCategDto" @bind-Value="FModel.CityId"
                                Placeholder="اختر المدينه" Query="@CityQuery">
                    <DropDownListEvents TValue="int" TItem="LookupWithCategDto" Filtering="CityFiltering" ValueChange="CityChange"></DropDownListEvents>
                    <SfDataManager Url="api/Lookups/GetLookupsWithCateg/AllCities" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <DropDownListFieldSettings Text="DisplayName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="() => FModel.CityId"></ValidationMessage>
            </div>
        </div>

        <div>
            <label asp-for="Ingredients" class="control-label">أسعار التوصيل للمحافظات</label>

            <SfGrid ID="DeliveryManStatesGrid" DataSource="@FModel.DeliveryManStatesPrices" @ref="refDeliveryManStatespricesGrid" AllowReordering="true" AllowSelection="true"
                    AllowSorting="true" Toolbar="@(ToolbarItems)" Height="100%" Width="100%">
                <GridEditSettings AllowAdding="true" AllowEditing="true" Mode="EditMode.Normal"></GridEditSettings>
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                <GridEvents OnActionBegin="DeliveryManStatesPricesActionBeginHandler"
                            TValue="DeliveryManStatesPricesDto"></GridEvents>
                <GridColumns>

                    <GridColumn Field="State.DisplayName" HeaderText="المحافظة" ValidationRules="@(new ValidationRules { Required = true })" EditType="EditType.DropDownEdit">
                        <EditTemplate Context="cContext">
                            <SfDropDownList ID="GridState" @ref="refDeliveryManState" Query="@DeliveryManStateQuery" Enabled="@(DeliveryManStateQuery != null)" @bind-value="(cContext as DeliveryManStatesPricesDto).State.Id" TValue="int" TItem="LookupDto"
                                            Placeholder="المحافظه">
                                <DropDownListEvents TValue="int" TItem="LookupDto" Filtering="DeliveryManStateFiltering"></DropDownListEvents>
                                <SfDataManager Url="api/States/GetStates" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                                <DropDownListFieldSettings Text="DisplayName" Value="Id"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="int" TItem="LookupDto" ValueChange="(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupDto> args) => (cContext as DeliveryManStatesPricesDto).State.DisplayName = args.ItemData.DisplayName"></DropDownListEvents>
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>

                    <GridColumn Field=@nameof(DeliveryManStatesPricesDto.DeliveryPrice) HeaderText="سعر التوصيل" ValidationRules="@(new ValidationRules { Required = true, Number = true, Min = 1 })"></GridColumn>

                    <GridColumn TextAlign="TextAlign.Center" Width="80" HeaderText="حذف">
                        <Template Context="cContext">
                            <div class="col-6">
                                <button class="btn-icon-btn btn-outline-light" type="button" @onclick="@(() => Delete((cContext as DeliveryManStatesPricesDto)))">
                                    <img class="btn-icon" src="/img/trash.png" />
                                </button>
                            </div>
                        </Template>
                    </GridColumn>

                </GridColumns>
            </SfGrid>
        </div>


        <div class="form-group">
            <button type="submit" disabled=@Disabled class="btn btn-primary">حفظ</button>
            <button class="btn btn-link" disabled=@Disabled @onclick="Cancel_Click">إلغاء</button>
        </div>
    </EditForm>

}


@code{
        [Inject]
        protected HttpClient Http { get; set; }
        [Parameter]
        public EventCallback OnCancel { get; set; }
        [Parameter]
        public EventCallback<string> OnSuccess { get; set; }
        CreateDeliveryManFM FModel { get; set; }
        bool Disabled { get; set; }
    public SfDropDownList<int, LookupDto> refState { get; set; }
    public Query StateQuery { get; set; } = null;
    public SfDropDownList<int, LookupWithCategDto> refCity { get; set; }
    public Query CityQuery { get; set; } = null;
    public SfDropDownList<int, LookupDto> refGender { get; set; }
    public Query GenderQuery { get; set; } = null;
    public DeliveryManDto DeliveryManData { get; set; }
    CreateDeliveryManCommandValidator custVal = new CreateDeliveryManCommandValidator();

    public SfDropDownList<int, LookupDto> refDeliveryManState { get; set; }
    public Query DeliveryManStateQuery { get; set; } = null;
    SfGrid<DeliveryManStatesPricesDto> refDeliveryManStatespricesGrid;

    private List<object> ToolbarItems = new List<object>() {
        new ItemModel() { Text = "إضافة", PrefixIcon = "e-add", Id = "DeliveryManStatesGrid_add"},
        new ItemModel(){ Text = "تعديل", PrefixIcon= "e-edit", Id="DeliveryManStatesGrid_edit"},
        new ItemModel(){ Text = "حفظ", PrefixIcon= "e-update", Id="DeliveryManStatesGrid_update"},
        new ItemModel(){ Text = "إلغاء", PrefixIcon= "e-cancel", Id="DeliveryManStatesGrid_cancel"}
    };


    public async void GenderChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupDto> args)
    {
        var Val = args.ItemData.Id;
        if (Val != 0)
        {
            var lData = args.ItemData;
            FModel.GenderName = lData.DisplayName;
        }
        else
        {
            FModel.GenderName = null;
        }
        StateHasChanged();
    }

    private void DeliveryManStateFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        //this.DeliveryManStateQuery = new Query().AddParams("Search", args.Text).AddParams("Take", 6);

        StateHasChanged();
    }

    public async void StateChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupDto> args)
    {
        var Val = args.ItemData.Id;
        if (Val != 0)
        {
            var lData = args.ItemData;
            FModel.StateName = lData.DisplayName;
            FModel.CityName = null;
            this.CityQuery = new Query().AddParams("Take", 6).AddParams("CategoryId", Val);
        }
        else
        {
            FModel.StateName = null;
        }
        StateHasChanged();
    }

    private void StateFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        this.StateQuery = new Query().AddParams("Search", args.Text).AddParams("Take", 6);

        StateHasChanged();
    }

    public async void CityChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupWithCategDto> args)
    {
        var Val = args.ItemData.Id;
        if (Val != 0)
        {
            var lData = args.ItemData;
            FModel.CityName = lData.DisplayName;
        }
        else
        {
            FModel.CityName = null;
        }
        StateHasChanged();
    }

    private void CityFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        this.CityQuery = new Query().AddParams("Search", args.Text).AddParams("Take", 6);

        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        Disabled = false;

        this.StateQuery = new Query().AddParams("Take", 6);
        this.GenderQuery = new Query();
        this.DeliveryManStateQuery = new Query();


        FModel = new CreateDeliveryManFM
        {
            Active = true,
        };

    }

    private void Delete(DeliveryManStatesPricesDto rowToDelete)
    {
        FModel.DeliveryManStatesPrices.Remove(rowToDelete);
        refDeliveryManStatespricesGrid.Refresh();
    }


    public async Task DeliveryManStatesPricesActionBeginHandler(ActionEventArgs<DeliveryManStatesPricesDto> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save && Args.Action == "Add")
        {
            var IsPresent = FModel.DeliveryManStatesPrices.Where(or => or.State.DisplayName == Args.Data.State.DisplayName).FirstOrDefault();
            if (IsPresent != null)
            {
                await ShippingOperations.ShowToast("خطأ من النظام", $"محافظة '{Args.RowData.State.DisplayName}' مضافه بالفعل", ToastType.Warning);

                Args.Cancel = true;   //if the same order id field exist then here we have cancelled default saving action. It will stay in edit mode
            }
        }

        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save && Args.Action == "Edit")
        {
            var data = FModel.DeliveryManStatesPrices.Where(or => or.State.DisplayName == Args.RowData.State.DisplayName).FirstOrDefault();
            if (data != null)
            {
                data.State.DisplayName = Args.Data.State.DisplayName;
                data.DeliveryPrice = Args.Data.DeliveryPrice;
            }
            refDeliveryManStatespricesGrid.Refresh();

        }

    }



    public async Task Cancel_Click()
    {
        Navigation.NavigateTo($"/deliverymen");
    }

    protected async Task SubmitClick()
    {
        try
        {
            Disabled = true;
            ShippingOperations.ShowSpinner(Disabled);
            var response = await Http.PostAsJsonAsync<CreateDeliveryManCommand>("api/DeliveryMen/Create", FModel);
            if (!response.IsSuccessStatusCode)
            {
                Disabled = false;
                ShippingOperations.ShowSpinner(Disabled);
                string error = await response.Content.ReadAsStringAsync();
                throw new Exception(error);
            }
            else
            {
                Disabled = false;
                ShippingOperations.ShowSpinner(Disabled);
                Navigation.NavigateTo($"/deliverymen");
                await ShippingOperations.ShowToast("نجاح", "تمت العملية بنجاح", ToastType.Success);
            }
        }
        catch (Exception ex)
        {
            Disabled = false;
            ShippingOperations.ShowSpinner(Disabled);
            await ShippingOperations.ShowToast("خطأ من النظام", ex.Message, ToastType.Error);
        }
    }
}










